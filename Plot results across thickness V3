# Import modules python3.12.2

from pathlib import Path
import pandas as pd
import json
import matplotlib.pyplot as plt
import numpy as np
import re
from collections import defaultdict
from scipy.optimize import curve_fit

model_version = 'Model V21-1' 

    

# Type path to folder here (Mac/Windows/Unix compatible):
#sim_folder = "/Users/alexiarango/Documents/Oghma/Circuit V21/V21-1/"
sim_folder = "C:\\Users\\acara\\OneDrive\\Documents\\Oghma\\v21-1\\"

# save as .pdf or .png?
plot_file_type = '.pdf'

#plot settings
black_background = True
plot_width = 12
plot_height = 6
dpi = 120

write_model_version = False

# Device area [m^2]
Area = 0.00000121	

# Device parameters
epsilon_C60 = 2.3
Nt = 1e24

# constants
epsilon0 = 8.854e-12
q = 1.6e-19

# thickness of MoO3 in nm
moo3_thickness = 10

mu_target = 4.3e-8


'''
Set color for each circuit element
'''

colors = {'resistors': {        'Rb': '#00f3fb',
                                'Rs': '#fb0000', 
                                'Rt': '#fb0000',
                              'Rbsh': '#00f3fb', 
                              'Rcsh': '#fbea00', 
                                'Rc': '#fbea00', 
                               'Rsh': '#4bfb00', 
                             'Rshsh': '#4bfb00',
                             'Rbdsh': '#00cdfb'
                         },
          'spacecharges': {     'St': '#fb0000',
                                'Sc': '#fbea00',
                                'Sb': '#00f3fb',
                               'Ssh': '#2a8c00'
                          },
          'transports': {       'Tt': '#fb0000',
                               'Tsh': '#2a8c00'
                         },
          'interfaces': {        'I': '#fb8600'
                         },
          'diodes': {           'Id': '#fb8600',
                              'Idsh': '#4bfb00'
                     },
          'barriers': {          'B': '#00f3fb'
                       }
           }







'''
Load all saved circuit results in sim_folder
'''

# Convert string to path 
folder_path = Path(sim_folder)

# Create dictionary for all device data
data_dict = {}

# find folders in sim directory
subfolders = [entry for entry in folder_path.iterdir() if entry.is_dir()]

# Filter subdirectories that end with "results"
matching_folders = [folder for folder in subfolders if folder.name.endswith("results")]

for index, folders in enumerate(matching_folders):

    # look for 'fit values' file with greatest last digit
    filename = folders / 'fit values .json'
    last_digit=1
    while (new_filename := filename.with_stem(f"{filename.stem}{last_digit}")).exists():
        last_digit += 1

        # open diction from file
        with open(new_filename, 'r') as f:
            file_dict = json.load(f)

    

    # Search folder name for device parameters
    folder_name = folders.name
    match = re.search(r'(..)nm', folder_name)
    thickness = int(match.group(1))
    match = re.search(r'd(..)', folder_name)
    age = int(match.group(1))
    match = re.search(r'\b(?:up|down)\b', folder_name)
    sweep = match.group().lower()

    # Add device properties to loaded dictionary
    file_dict['thickness'] = thickness
    file_dict['age'] = age
    file_dict['sweep'] = sweep
    
    # Add device to main dictionary 
    data_dict[str(index)] = file_dict

#print(device_dict)

# Save dictionary to a JSON file
with open(sim_folder + 'data_dict.json', 'w') as f:
    json.dump(data_dict, f)







'''
Set up master plot
'''

#black background

if black_background == True:
  plt.style.use('dark_background')							

# Create figure layout
layout = [
    ['R'    , 'Rs'      , 'S'   , 'T'       , 'Et'  ],
    ['R'    , 'Rt'      , 'St'  , 'I'       , 'Ei'  ],
    ['R'    , 'Rcsh'    , 'Sc'  , 'Id'      , 'nd'  ],
    ['Rsh'  , 'Rshsh'   , 'Ssh' , 'Idsh'    , 'ndsh'],
    ['Rsh'  , 'Rbsh'    , 'Sb'  , 'B'       , 'b0'  ]
]

fig = plt.figure(figsize=(plot_width, plot_height), dpi=dpi)

ax = fig.subplot_mosaic(layout)

#adjust plot margins
fig.subplots_adjust(top=0.995, right=0.99, bottom=0.12, left=0.05, hspace=0, wspace=0.4)

# Set title
i=1
fig.canvas.manager.set_window_title(folder_path.name + " " + str(i)) 

# Set axes y labels
for row in layout:
    for item in row:
        ax[item].set_ylabel(item)


# Set axes labels
ax['S'].set_xlabel("Thickness [nm]")

# Set log scale
ax['R'].set_yscale("log")
ax['S'].set_yscale("log")
ax['Rsh'].set_yscale('log')
#ax['Id'].set_yscale('log')
ax['Idsh'].set_yscale('log')

if write_model_version == True:
  
  #text box for model version
  ax['R'].text(0.98, 0.025, model_version, transform=ax['R'].transAxes, ha='right')		









'''
Set up St plot
'''

fig1, ax1 = plt.subplots(figsize = (plot_height, plot_height), dpi=dpi)

#adjust plot margins
fig1.subplots_adjust(top=0.995, right=0.99, bottom=0.12, left=0.2, hspace=0, wspace=0.4)

# Set title
i=1
fig1.canvas.manager.set_window_title(folder_path.name + " " + str(i)) 

# Set axes labels
ax1.set_xlabel("d^{-3} [m^{-3}]")
ax1.set_ylabel("S_0")








'''
Set up Tt plot
'''

fig2, ax2 = plt.subplots(figsize = (plot_height, plot_height), dpi=dpi)

#adjust plot margins
fig2.subplots_adjust(top=0.995, right=0.99, bottom=0.12, left=0.2, hspace=0, wspace=0.4)

# Set title
i=1
fig2.canvas.manager.set_window_title(folder_path.name + " " + str(i)) 

# Set axes labels
ax2.set_xlabel("d^{-(2l+1)} [m^{-(2l+1)}]")
ax2.set_ylabel("T_0")
ax2.set_xscale('log')
ax2.set_yscale('log')






'''
Set up are fraction plot
'''

fig3, ax3 = plt.subplots(figsize = (plot_height, plot_height), dpi=dpi)

#adjust plot margins
fig3.subplots_adjust(top=0.995, right=0.99, bottom=0.12, left=0.2, hspace=0, wspace=0.4)

# Set title
i=1
fig3.canvas.manager.set_window_title(folder_path.name + " " + str(i)) 

# Set axes labels
ax3.set_xlabel("Thickness [nm]")
ax3.set_ylabel("Area fraction")
ax3.set_yscale('log')






'''
Function to create dataframe for each circuit element parameter and store in a results dictionary
'''

# dictionary for dataframe of sweeps
results_dict = defaultdict(lambda: defaultdict(dict))

def make_dfs(element_type_data, element_type_results, element_title, element_para):

    #select the data, add to up/down column in dataframe write to result_dict

    if i == 0:
        # if this is this the first iteration, 
        # create new dataframe
        df = pd.DataFrame(columns = ['Thickness', 'Age', 'up', 'down'])

        # create new dataframe row for the device
        df.loc[name, 'Thickness'] = thickness
        df.loc[name, 'Age'] = age
    else:
        # load saved dataframe
        df = results_dict[element_type_results][element_title][element_para]

        # determine if new row is needed
        if ((df['Thickness'] == thickness) & (df['Age'] == age)).any():
            pass
        else:
            df.loc[name, 'Thickness'] = thickness
            df.loc[name, 'Age'] = age

    #get value for element
    value = data_dict[name][element_type_data][element_para][element_title]

    # add value to correct row/column in dataframe
    df.loc[(df['Thickness'] == thickness) & (df['Age'] == age), sweep] = value

    # add df to results dictionary
    results_dict[element_type_results][element_title][element_para] = df








'''
cycle through data dictionary and create new results dictionary containing dataframes
'''


for i, name in enumerate(data_dict):
    #select the device+sweep & add row to dataframe
    
    # get properties
    thickness = data_dict[name]['thickness']
    age = data_dict[name]['age']
    sweep = data_dict[name]['sweep']


    for parameter in data_dict[name]['resistors']:
        for resistors in data_dict[name]['resistors'][parameter]:
        
            make_dfs('resistors', 'resistors', resistors, parameter)

    for parameter in data_dict[name]['powers']:
        for powers in data_dict[name]['powers'][parameter]:

            # select spacecharges elements
            if data_dict[name]['powers']['Power'][powers] == 2:
                
                make_dfs('powers', 'spacecharges', powers, parameter)
                
            # select transports elements   
            elif data_dict[name]['powers']['Power'][powers] < 20:
                
                make_dfs('powers', 'transports', powers, parameter)

            # select interfaces elements
            else:
                
                make_dfs('powers', 'interfaces', powers, parameter)

    for parameter in data_dict[name]['diodes']:
        for diodes in data_dict[name]['diodes'][parameter]:
            
            make_dfs('diodes', 'diodes', diodes, parameter)

    for parameter in data_dict[name]['barriers']:
        for barriers in data_dict[name]['barriers'][parameter]:
            
            make_dfs('barriers', 'barriers', barriers, parameter)







'''
Find average of all up/down values in results dictionary
'''


for type in results_dict:
    for element in results_dict[type]:
        for parameter in results_dict[type][element]:
            
            # get df for element
            df = results_dict[type][element][parameter]

            # create new average column
            df['ave'] = (df['up'] + df['down'])/2






'''
Calculations for St
'''

# get df for St
df = results_dict['spacecharges']['St']['I0']

print(df)

# calculate d^-3
df['d^-3'] = np.power(df['Thickness'] * 1e-9, -3)

# calculate current density cofficient
df['Jo_sc'] = np.power(df['ave'], 2)/Area
df['Jo_sc up'] = np.power(df['up'], 2)/Area
df['Jo_sc down'] = np.power(df['down'], 2)/Area

# def linear function
def linear_function(x, m, b):
    return m*x + b

m_guess = 1e-20
b_guess = -10000

# mobility fit
Jo_sc_fit = curve_fit(linear_function, 
                      pd.to_numeric(df['d^-3']),
                      pd.to_numeric(df['Jo_sc']),
                      p0=[m_guess, b_guess],
                      method='lm')

# d^-3 x values for fit
xfit_np = np.linspace(-1e20, 4e22)

# Jo_sc values for fit
yfit_np = Jo_sc_fit[0][0]*xfit_np + Jo_sc_fit[0][1]

# calculate mobilty
mu = 8/9*Jo_sc_fit[0][0]/epsilon0/epsilon_C60

print('mobility =', mu)
print('offset =', Jo_sc_fit[0][1])





'''
Define function to plot up/down/ave
'''

def add_to_plot(plot_name, element_type, element_title, element_para):

    #get df for element
    df = results_dict[element_type][element_title][element_para]

    # add data point to plot
    ax[plot_name].plot(df['Thickness'], 
                df['up'],
                marker = '^',
                linewidth = 0.5,
                linestyle = '--',
                color = colors[element_type][element_title])
    
    ax[plot_name].plot(df['Thickness'], 
                df['down'],
                marker = 'v',
                linewidth = 0.5,
                linestyle = '--',
                color = colors[element_type][element_title])
    
    ax[plot_name].plot(df['Thickness'], 
                df['ave'],
                marker = 'x',
                linewidth = 1,
                linestyle = '-',
                color = colors[element_type][element_title])







'''
Add data to master plots
'''

for resistors in results_dict['resistors']:
    add_to_plot('R','resistors', resistors, 'R [Ohms]')

add_to_plot('Rs','resistors', 'Rs', 'R [Ohms]')

add_to_plot('Rsh','resistors', 'Rsh', 'R [Ohms]')
add_to_plot('Rsh','resistors', 'Rshsh', 'R [Ohms]')
add_to_plot('Rsh','resistors', 'Rcsh', 'R [Ohms]')
add_to_plot('Rsh','resistors', 'Rbsh', 'R [Ohms]')

add_to_plot('Rt','resistors', 'Rt', 'R [Ohms]')
add_to_plot('Rcsh', 'resistors', 'Rcsh', 'R [Ohms]')
add_to_plot('Rbsh', 'resistors', 'Rbsh', 'R [Ohms]')
add_to_plot('Rshsh', 'resistors', 'Rshsh', 'R [Ohms]')


for spacecharges in results_dict['spacecharges']:
    add_to_plot('S','spacecharges', spacecharges, 'I0')

add_to_plot('St','spacecharges', 'St', 'I0')
add_to_plot('Sb','spacecharges', 'Sb', 'I0')
add_to_plot('Sc','spacecharges', 'Sc', 'I0')
add_to_plot('Ssh','spacecharges', 'Ssh', 'I0')

for transports in results_dict['transports']:
    add_to_plot('T','transports', transports, 'I0')
    add_to_plot('Et','transports', transports, 'Power')

for interfaces in results_dict['interfaces']:
    add_to_plot('I','interfaces', interfaces, 'I0')
    add_to_plot('Ei','interfaces', interfaces, 'Power')


add_to_plot('Id','diodes', 'Id', 'I0')
add_to_plot('nd','diodes', 'Id', 'n')
add_to_plot('Idsh','diodes', 'Idsh', 'I0')
add_to_plot('ndsh','diodes', 'Idsh', 'n')



for barriers in results_dict['barriers']:
    add_to_plot('B','barriers', barriers, 'I0')
    add_to_plot('b0','barriers', barriers, 'b0')

# Save figure
fig.savefig(sim_folder + 'All parameters' + plot_file_type)







'''
Add values to Jo_sc plot
'''

#get df for element
df = results_dict['spacecharges']['St']['I0']

# add data point to plot
ax1.plot(df['d^-3'], 
            df['Jo_sc'],
            marker = 'o',
            linewidth = 1,
            linestyle = '-',
            color = colors['spacecharges']['St'])

ax1.plot(df['d^-3'], 
            df['Jo_sc up'],
            marker = '^',
            linewidth = 0.5,
            linestyle = '--',
            color = colors['spacecharges']['St'])

ax1.plot(df['d^-3'], 
            df['Jo_sc down'],
            marker = 'v',
            linewidth = 0.5,
            linestyle = '--',
            color = colors['spacecharges']['St'])

ax1.plot(xfit_np, 
        yfit_np,
        linewidth = 1,
        linestyle = '--',
        color = 'white')

# draw mobility target line
x_np = np.linspace(0,4e22,10)
Jo_np = 9/8*epsilon0*epsilon_C60*mu_target*x_np

ax1.plot(x_np, 
        Jo_np,
        linewidth = 1,
        linestyle = '-',
        color = 'gray')


ax1.set_ylim(bottom=0)

# Save figure
fig1.savefig(sim_folder + 'Jo_sc' + plot_file_type )








'''
Solve for Nc
'''

# define functin for mobility
def mobility(I0, thickness):
    return 8/9 / epsilon0 / epsilon_C60 * np.power(thickness.astype(float) * 1e-9, 3) * np.power(I0, 2) / Area

# define function for y values
def y_values(I0, slope, mobility):
    l = slope - 1
    current_term = np.power(I0, l + 1)
    trap_term = np.power(q * Nt / epsilon0 / epsilon_C60 * (l + 1) / l, l)
    slope_term = np.power((l + 1) / (2 * l + 1), l + 1)
    return current_term / Area / q / mobility * trap_term * slope_term

# define function for x values
def x_values(thickness, slope):
    l = slope - 1
    return np.power(thickness.astype(float) * 1e-9, -(2 * l + 1))

# get df for St
St_df = results_dict['spacecharges']['St']['I0']

# get df for Tt
Tt_df = results_dict['transports']['Tt']['I0']

# calculate mobility
Tt_df['mu'] = mobility(St_df['ave'], St_df['Thickness'])
Tt_df['mu up'] = mobility(St_df['up'], St_df['Thickness'])
Tt_df['mu down'] = mobility(St_df['down'], St_df['Thickness'])

# find slope
Tt_df['slope'] = results_dict['transports']['Tt']['Power']['ave']
Tt_df['slope up'] = results_dict['transports']['Tt']['Power']['up']
Tt_df['slope down'] = results_dict['transports']['Tt']['Power']['down']

# calculate x values
Tt_df['x_values'] = x_values(Tt_df['Thickness'], Tt_df['slope'])
Tt_df['x_values up'] = x_values(Tt_df['Thickness'], Tt_df['slope up'])
Tt_df['x_values down'] = x_values(Tt_df['Thickness'], Tt_df['slope down'])

# caluculate y values
Tt_df['y_values'] = y_values(Tt_df['ave'], Tt_df['slope'], Tt_df['mu'])
Tt_df['y_values up'] = y_values(Tt_df['up'], Tt_df['slope'], Tt_df['mu up'])
Tt_df['y_values down'] = y_values(Tt_df['down'], Tt_df['slope'], Tt_df['mu down'])

# Nc fit
m_guess = 5e25
b_guess = 0

print(St_df['Thickness'].astype(float) * 1e-9)

print(Tt_df['mu'].astype(float))

# mobility fit
Nc_fit = curve_fit(linear_function, 
                      pd.to_numeric(Tt_df['x_values']),
                      pd.to_numeric(Tt_df['y_values']),
                      p0=[m_guess, b_guess],
                      method='lm')

# d^-(2l+1) x values for fit line
xfit_np = np.linspace(1e48, 1e65)

# y values for fit line
yfit_np = Nc_fit[0][0]*xfit_np + Nc_fit[0][1]

# calculate Nc
Nc = Nc_fit[0][0]

print('Nc =', Nc)
print('offset =', Nc_fit[0][1])








'''
function to add up/down/ave data point to plot with same color

'''
def data_to_ax(axis, dataframe, row, x_values, y_values, color):

    axis.plot(dataframe.loc[row, x_values], 
            dataframe.loc[row, y_values],
            marker = 'o',
            linewidth = 1,
            linestyle = '-',
            color = color,
            label = dataframe.loc[row, 'Thickness'])

    axis.plot(dataframe.loc[row, x_values + ' up'], 
            dataframe.loc[row, y_values + ' up'],
            marker = '^',
            linewidth = 0.5,
            linestyle = '--',
            color = color
            )

    axis.plot(dataframe.loc[row, x_values + ' down'], 
            dataframe.loc[row, y_values + ' down'],
            marker = 'v',
            linewidth = 0.5,
            linestyle = '--',
            color = color)
    





'''
Add values to Tt plot
'''

# add data to plot
data_to_ax(ax2, Tt_df, Tt_df.index[0], 'x_values', 'y_values', '#00f2ff')
data_to_ax(ax2, Tt_df, Tt_df.index[1], 'x_values', 'y_values', '#f700ff')
data_to_ax(ax2, Tt_df, Tt_df.index[2], 'x_values', 'y_values', '#f6ff00')
data_to_ax(ax2, Tt_df, Tt_df.index[3], 'x_values', 'y_values', '#4dff00')

# plot fit line
ax2.plot(xfit_np, 
        yfit_np,
        linewidth = 1,
        linestyle = '--',
        color = 'white')

# plot guess Nc line
ax2.plot(xfit_np, 
        m_guess * xfit_np,
        linewidth = 1,
        linestyle = '-',
        color = 'gray')

#text box for Nt
ax2.text(0.98, 0.06, 'Nt = ' + format(Nt,'.2e'), transform=ax2.transAxes, ha='right')

#text box for Nc
ax2.text(0.98, 0.025, 'Nc = ' + format(Nc,'.2e'), transform=ax2.transAxes, ha='right')

ax2.legend()

# Save figure
fig2.savefig(sim_folder + 'Tt' + plot_file_type )





'''
Plot area fraction
'''

# define function to calculate fractional area for Ssh element
def fraction_S(sweep):
    return (np.power(moo3_thickness/results_dict['spacecharges']['St']['I0']['Thickness'], 3)
    * np.power(results_dict['spacecharges']['Ssh']['I0'][sweep]
             /results_dict['spacecharges']['St']['I0'][sweep], 2))

# find fraction for Ssh element
St_df['fraction'] = fraction_S('ave')
St_df['fraction up'] = fraction_S('up')
St_df['fraction down'] = fraction_S('down')

# define function to calculate fraction area for Tsh element
def fraction_T(sweep):
    l = Tt_df['slope'] - 1
    return (np.power(moo3_thickness/results_dict['transports']['Tt']['I0']['Thickness'], 
              2 * l + 1)
    * np.power(results_dict['transports']['Tsh']['I0'][sweep]
             /results_dict['transports']['Tt']['I0'][sweep], l + 1))

# find fraction for Tsh element
Tt_df['fraction'] = fraction_T('ave')
Tt_df['fraction up'] = fraction_T('up')
Tt_df['fraction down'] = fraction_T('down')

# add S fraction data to plot
data_to_ax(ax3, St_df, St_df.index[0], 'Thickness', 'fraction', '#00f2ff')
data_to_ax(ax3, St_df, St_df.index[1], 'Thickness', 'fraction', '#f700ff')
data_to_ax(ax3, St_df, St_df.index[2], 'Thickness', 'fraction', '#f6ff00')

# add T fraction data to plot
data_to_ax(ax3, Tt_df, Tt_df.index[0], 'Thickness', 'fraction', '#0051ff')
data_to_ax(ax3, Tt_df, Tt_df.index[1], 'Thickness', 'fraction', '#8c00ff')
data_to_ax(ax3, Tt_df, Tt_df.index[2], 'Thickness', 'fraction', '#ff9d00')

ax3.legend()

# Save figure
fig3.savefig(sim_folder + 'Fraction' + plot_file_type )