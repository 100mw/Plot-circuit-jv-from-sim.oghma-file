# Import modules python3.12.2

from pathlib import Path
import pandas as pd
import json
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit
from scipy import interpolate
from scipy.interpolate import LSQUnivariateSpline
import re
import plotly.express as px

model_version = 'Model V19-1' 

# device area [m^2]
A = 0.00000121	         

# Type path to folder here (Mac/Windows/Unix compatible):

files = Path(
  "/Users/alexiarango/Documents/Oghma/Circuit V19/V19-1/circuit_v19 c60 40nm d14 up/"
)

## Windows:
#files = Path(
# "C:/Users/aarango/Documents/circuit_v12-3 c60 30nm d10 up"
#)


'''
Set plotting attributes
'''

black_background = True

plot_slopes = False

plot_width = 7
plot_height = 9
dpi = 120

line_color = 'white'
data_color = 'darkcyan'
point_color = (0.8, 0.8, 0)
fit_color = 'deeppink'
elements_line_color = 'gray'
linewidth = 2

write_model_version = False
write_parameter_data_df = False

'''
Open raw jv data file and create numpy array
'''

data_raw = pd.read_csv(files / "fit_data0.inp", sep="\t", skiprows=1, header=None)
data_raw = data_raw.loc[(data_raw!=0).any(axis=1)]
v_data = data_raw[data_raw.columns[0]].to_numpy()
j_data = data_raw[data_raw.columns[1]].to_numpy()

# Eliminate first data point if errant
if v_data[0] < 1e-10:
  v_data = np.delete(v_data, [0])
  j_data = np.delete(j_data, [0])



''''
Extract current and voltage drops across circuit elements from netlist folders
'''

# Generate list of folder paths in netlist folder
netlist = files / "netlist/"
folders = list(netlist.glob('*/'))


# Iterate through each folder and read circuit_labels.dat files

#create empty DataFrame
data_df = pd.DataFrame()

#iterate over list with length = number of folders
for x in range(len(folders)):

  #get folder name, step number
  step = int(folders[x].name)
    
  #do not use .DS_Store file
  if step == ".DS_Store" or step == "results" or step == "data.json":
      continue

  temp = pd.DataFrame()

  #Read circuit_labels into DataFrame
  temp = pd.read_json(folders[x] / "circuit_labels.dat")

  #open data.json file
  with open(folders[x] / "data.json", 'r') as f:
    folder_data = json.load(f)

  # get voltage from data.json
  voltage = folder_data['voltage']

  # create list of voltages
  voltage_list = [voltage] * len(temp.columns)
  
  
  
  # append new voltage row to temp
  temp.loc['voltage'] = voltage_list

  #append new rows to DataFrame
  data_df = pd.concat([data_df, temp])

# Transpose DataFrame
#data_df.sort_index(axis=0,kind='stable',inplace=True)

# drop extra segments column
data_df = data_df.drop(columns=['segments'])





'''
Determine circuit element titles based on uid and replace segment column titles
'''

# find uid data_df
uid=data_df.iloc[1].to_list()

print(uid)

# turn circuit_labels uid into sim.json segment#
segments=[]
for x in uid:
	segments.append(f"segment{x}")

print(segments)

# open sim.json and find segment names
myfile = open(files / 'sim.json')
sim = json.load(myfile)
titles=[]
for x in segments:
	titles.append(sim['circuit']['circuit_diagram'][x]['name'])
	
print(titles)

# rename dataframe columns
for i, column in enumerate(data_df.columns):
	data_df = data_df.rename(columns={column: titles[i]})

print(data_df)
print(len(data_df.columns))


'''
Set up ploting
'''

# Create figure
if black_background == True:
  plt.style.use('dark_background')							#black background

if plot_slopes == True:
  fig, (axs0, axs1, axs2)   = plt.subplots(3, 1, sharex=True, figsize=(plot_width, plot_height), gridspec_kw={'height_ratios':[1,1,0.5]}, dpi=dpi)
  
  #adjust plot margins
  fig.subplots_adjust(top=0.995, right=0.99, bottom=0.055, left=0.11, hspace=0)
  
else:
  fig, axs0 = plt.subplots(1, 1, sharex=True, figsize=(plot_width, plot_height), dpi=dpi, layout='constrained')

fig.canvas.manager.set_window_title(files.name + " " + str(i)) 

# Set up iv plot
axs0.set_ylabel("Current density [A/m$^2$]")
axs0.set_xscale("log")
axs0.set_yscale("log")

if plot_slopes == False:
  axs0.set_xlabel("Voltage [V]")  


# set axis limits

axs0.set_xlim(
              v_data[0],
              v_data[-1]
)

axs0.set_ylim(			
                j_data.min()*0.1,			# grab min from data
                j_data.max()*2				# grab max from data
)

if write_model_version == True:
  
  #text box for model version
  axs0.text(0.98, 0.025, model_version, transform=axs0.transAxes, ha='right')		

if write_parameter_data_df == True:
  
  # remove column names from string
  circuit_parameters_temp = circuit_parameters_df.to_string()
  rows = circuit_parameters_temp.split('\n')
  rows.pop(0)
  circuit_parameters_string = '\n'.join(rows)
  
  # Add table of circuit parameters to plot
  axs0.text(0.02, 0.98, 
              circuit_parameters_string,   
              transform=axs0.transAxes, ha='left', va='top')
            
  # text box for jv error
  #axs0.text(0.5, 0.025, 'Error = ' + "{:.3e}".format(Jdark_error), transform=axs0.transAxes, ha='center')


'''
Add data to plot
'''

# Add raw data to iv plot
axs0.plot(v_data, j_data, linewidth=0, color=point_color, marker='o', markersize=1)

# add fit to plot
for i in range(len(uid)):
    column_title = data_df.columns[i]
    current_df = data_df.loc['i', column_title]
    current = current_df.values / A
    current = np.sort(current)
    volt_drop = data_df.loc['voltage', column_title].values
    volt_drop = np.sort(volt_drop)
    axs0.plot(volt_drop,
              current,
              color = line_color,
              linewidth=linewidth/5)



plt.show()

# Add spline
#axs0.plot(v_data_masked, jv_spline(v_data_masked), linewidth=linewidth, color=data_color)

